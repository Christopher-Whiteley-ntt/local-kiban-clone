app:
  title: NTT Data UK (Local) Backstage App
  baseUrl: http://localhost:3000

organization:
  name: Kiban (Local)

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    # connection: ':memory:'
    connection:
      directory: ../../sqlite-db
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  azure:
    - host: dev.azure.com
      credentials:
        - personalAccessToken: ${ADO_TOKEN:-NOACCESS}
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN:-NOACCESS}
  gitlab:
    - host: git.altemista.cloud
      token: ${GITLAB_ALTEMISTA_TOKEN:-NOACCESS}
      apiBaseUrl: https://git.altemista.cloud/api/v4
    - host: gitlab.com
      token: ${GITLAB_TOKEN:-NOACCESS}

# proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  autologout:
    enabled: true
    idleTimeoutMinutes: 5
    promptBeforeIdleSeconds: 30

  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
         resolvers:
           - resolver: usernameMatchingUserEntityName
    gitlab:
      development:
        clientId: ${AUTH_GITLAB_ALTEMISTA_CLIENT_ID}
        clientSecret: ${AUTH_GITLAB_ALTEMISTA_CLIENT_SECRET}
        audience: https://git.altemista.cloud
        enableExperimentalRedirectFlow: true
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName

# scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  orphanStrategy: delete
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [ API, Component, Location, Resource, System, Template ]

  providers:
    github:
      # scan a user's github repos if GITHUB_USER is set
      github-personal-projects:
        organization: ${SCAN_GITHUB_USER:-NOUSER}
        orgEnabled: false
        schedule:
          frequency: { minutes: 30 }
          timeout: { minutes: 5 }
        rules:
          - allow: [ API, Component, Location, Resource, System, Template ]
        validateLocationsExist: true
    gitlab:
      # Pull organisation information from altemista's nttdata-uk org
      altemista-org:
        host: git.altemista.cloud
        orgEnabled: true
        allowInherited: true
        group: nttdata-uk
        projectPattern: EXLUDEALLHACK # no repos should match this pattern
        schedule:
          frequency: { minutes: 60 }
          timeout: { minutes: 1 }
        rules:
          - allow: [Group, User]
      altemista-kiban-projects:
        host: git.altemista.cloud
        orgEnabled: false
        group: nttdata-uk/kiban
        schedule:
          frequency: { minutes: 5 }
          timeout: { minutes: 1 }
        rules:
          - allow: [ API, Component, Location, Resource, System, Template ]
      altemista-personal-projects:
        host: git.altemista.cloud
        orgEnabled: false
        userPattern: ${SCAN_ALTEMISTA_USER:-NOUSER}
        projectPattern: ${SCAN_ALTEMISTA_USER:-NOUSER}
        excludeRepos:
          - andynelson/backstage-templates
        schedule:
          frequency: { minutes: 60 }
          timeout: { minutes: 5 }
        rules:
          - allow: [ API, Component, Location, Resource, System, Template ]



# kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

gitlab:
  defaultCodeOwnersPath: .gitlab/CODEOWNERS
  allowedKinds: ['Component', 'Resource']
